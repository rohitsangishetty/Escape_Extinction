import pygame
from sys import exit
from random import randint

#class Player(pygame.sprite.Sprite):
 #   def __init__(self):
  #      super().__init__()
   #   self.player_walk.append(player_walk_2 = pygame.image.load('graphics/dino_2.png')).convert_alpha
    #    self.player_walk.append(player_walk_3 = pygame.image.load('graphics/dino_3.png')).convert_alpha
     #   self.player_walk.append(player_walk_4 = pygame.image.load('graphics/dino_4.png')).convert_alpha
      #  self.player_index = 0
       # self.player_surface = player_walk[player_index]
        #self.player_rect = self.player_surface.get_rect(midbottom = (375,300))
    

#
#    def update(self):
#        self.player_input()
#        self.apply_gravity()



def animation_state():
    global player_surface, player_index, player_rect
    

    player_index += 0.15
    if player_index >= len(player_right_walk):
        player_index = 0
    
    if LEFT == True:
        player_surface = player_left_walk[int(player_index)]
    elif RIGHT == True:
        player_surface = player_right_walk[int(player_index)]


    if LEFT == False and RIGHT == False:
        player_surface = pygame.image.load('graphics/dino_idle_right.png').convert_alpha()
    
    if event.type == pygame.KEYUP:
        if event.key == pygame.K_LEFT:
            player_surface = pygame.image.load('graphics/dino_idle_left.png').convert_alpha()
        elif event.key == pygame.K_RIGHT:
            player_surface = pygame.image.load('graphics/dino_idle_right.png').convert_alpha()

    
    screen.blit(player_surface,player_rect)

def player_control():
    global LEFT, RIGHT
    player_velocity = 0
    player_gravity = 0
    

    player_gravity += 3
    player_rect.y += player_gravity
    if player_rect.bottom >= 500:
        player_rect.bottom = 500
    
    keys = pygame.key.get_pressed()
    LEFT = False
    RIGHT = False
    if keys[pygame.K_LEFT]:
        player_velocity -= 11
        LEFT = True
        RIGHT = False
        if player_rect.x < -50:
            player_rect.x = 800
    elif keys[pygame.K_RIGHT]:
        player_velocity += 11
        LEFT = False
        RIGHT = True
        if player_rect.x > 800:
            player_rect.x = -50

        
    if event.type == pygame.KEYUP:
        if event.key == pygame.K_LEFT or pygame.K_RIGHT:
                player_velocity = 0

    player_rect.x += player_velocity

def display_score():
    global score_surface, score_rect, display_time
    current_time = int(pygame.time.get_ticks() / 1000) - start_time
    score_surface = font.render('Score: ' + str(current_time),False,(64,64,64))
    score_rect = score_surface.get_rect(center = (375, 50))
    screen.blit(score_surface, score_rect)
    return current_time
   
def game_over_screen():
    global game_active, start_time, score
    player_stand = pygame.image.load('graphics/dino_idle_right.png').convert_alpha()
    player_stand = pygame.transform.rotozoom(player_stand,30,3.5).convert_alpha()
    player_stand_rect = player_stand.get_rect(center = (300,290))

    asteroid_idle = pygame.image.load('graphics/asteroid_2.png').convert_alpha()
    asteroid_idle = pygame.transform.rotozoom(asteroid_idle,10,1.5)
    asteroid_idle_rect = asteroid_idle.get_rect(center = (500,210))

    game_name = font.render('Escape Extinction', False, (138, 90, 14))
    game_name_rect = game_name.get_rect(center = (375,50))
    
    game_message = font.render('Press Space to start',False, (169, 172, 176))
    game_message_rect = game_message.get_rect(center = (375, 500))

    final_score_surface = font.render('Score: ' + str(score),False,(169, 172, 176))
    final_score_rect = final_score_surface.get_rect(center = (375,500))

    if game_active == False:
        if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            game_active = True
            start_time = int(pygame.time.get_ticks() / 1000)


    screen.blit(background_surface,(0,0))
    screen.blit(ground_surface,(0,480))
    screen.blit(player_stand,player_stand_rect)
    screen.blit(asteroid_idle,asteroid_idle_rect)
    screen.blit(game_name,game_name_rect)
    if score == 0:
        screen.blit(game_message,game_message_rect)
    else:
        screen.blit(final_score_surface,final_score_rect)

def restart_game():
    global game_active, start_time, player_rect, player_surface
    if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            game_active = True
            start_time = int(pygame.time.get_ticks() / 1000)
            player_rect = player_surface.get_rect(midbottom = (375,300))
            if asteroid_rect.y >=0:
                asteroid_rect.x = randint(0,750)
                asteroid_rect.y = -200
    
def asteroid_movement():  
    asteroid_rect.y += 8
    if asteroid_rect.y >=600:
        asteroid_rect.x = randint(50,700)
        asteroid_rect.y = -200
    
    screen.blit(asteroid_surface,asteroid_rect)

def item_movement():
    #random_num = randint(0,10)
    #if random_num == 0:
    #    star_fall_rate = True
    #else:
    #    star_fall_rate = False
    #while star_fall_rate == True and star_rect.y < 563:
    star_rect.y += 8
    #    if star_fall_rate == False:
    #        break
    if star_rect.y >= 563:
        star_rect.x = randint(50,700)
        star_rect.y = -3000
    elif star_rect.colliderect(player_rect):
        star_rect.x = randint(50,700)
        star_rect.y = -3000

    orb_rect.y += 8
    if orb_rect.y >= 563:
        orb_rect.x = randint(50,700)
        orb_rect.y = -1500
    elif orb_rect.colliderect(player_rect):
        asteroid_rect.y += 5
        orb_rect.x = randint(50,700)
        orb_rect.y = -3000


    screen.blit(star_surface,star_rect)
    screen.blit(orb_surface,orb_rect)

    
def collision():
    global game_active
    if player_rect.colliderect(asteroid_rect) and player_rect.bottom == 500:
        game_active = False

def difficulty():
    global score, asteroid_rect, player_rect
    if score >= 5:
        asteroid_rect.y += 8.3
    if score >= 15:
        asteroid_rect.y += 8.8
    if score >= 25:
        asteroid_rect.y += 9.2
    if score >= 40:
        asteroid_rect.y += 9.7
    if score >= 60:
        asteroid_rect.y += 10.2
    if score >= 80:
        asteroid_rect.y += 10.7
    


#def destroy():
 #   if asteroid_rect.y > 700:
  #      pygame.sprite.asteroid_rect.kill()



pygame.init()
pygame.display.set_caption('Escape Extinction')
screen = pygame.display.set_mode((750,563))
clock = pygame.time.Clock()

start_time  = 0
score = 0
font = pygame.font.Font('fonts/the-bomb-sound.regular.ttf', 45)
game_active = False

player_right_1 = pygame.image.load('graphics/dino_1_right.png').convert_alpha()
player_right_2 = pygame.image.load('graphics/dino_2_right.png').convert_alpha()
player_right_3 = pygame.image.load('graphics/dino_3_right.png').convert_alpha()
player_right_4 = pygame.image.load('graphics/dino_4_right.png').convert_alpha()

player_left_1 = pygame.image.load('graphics/dino_1_left.png').convert_alpha()
player_left_2 = pygame.image.load('graphics/dino_2_left.png').convert_alpha()
player_left_3 = pygame.image.load('graphics/dino_3_left.png').convert_alpha()
player_left_4 = pygame.image.load('graphics/dino_4_left.png').convert_alpha()

    
player_right_walk = [player_right_1,player_right_2,player_right_3,player_right_4]
player_left_walk = [player_left_1,player_left_2,player_left_3,player_left_4]

player_index = 0

#player_surface_right = player_right_walk[player_index]
#player_surface_left = player_left_walk[player_index]

player_surface = player_right_walk[player_index]
player_rect = player_surface.get_rect(midbottom = (375,300))

asteroid_1 = pygame.image.load('graphics/asteroid_1.png').convert_alpha()
asteroid_1 = pygame.transform.rotozoom(asteroid_1,45,1.3)
asteroid_2 = pygame.image.load('graphics/asteroid_2.png').convert_alpha()
asteroid_2 = pygame.transform.rotozoom(asteroid_2,45,1.3)

asteroid_frames = [asteroid_1,asteroid_2]
asteroid_index = 0
asteroid_surface = asteroid_frames[asteroid_index]
#asteroid_surface = asteroid_2
asteroid_rect = asteroid_surface.get_rect(midtop = (randint(100,751),-20))

#asteroid_index += 0.11
#if asteroid_index >= len(asteroid_frames):
 #       asteroid_index = 0
    
#asteroid_surface = asteroid_frames[int(asteroid_index)]

if asteroid_rect.y >= 600:
    asteroid_rect.x = randint(100,751)


star_surface_ = pygame.image.load('graphics/star.png').convert_alpha()
star_surface = pygame.transform.rotozoom(star_surface_,0,0.5)
star_rect = star_surface.get_rect(midtop = (randint(100,751), -1500))

orb_surface = pygame.image.load('graphics/orb.png').convert_alpha()
orb_surface = pygame.transform.rotozoom(orb_surface,0,0.5)
orb_rect = orb_surface.get_rect(midtop = (randint(100,751), -800))


background_surface = pygame.image.load('graphics/mountain2.png').convert()
ground_surface = pygame.image.load('graphics/grass.png').convert()



#obstacle_timer = pygame.USEREVENT + 1
#pygame.time.set_timer(obstacle_timer,1400)

asteroid_animation_timer = pygame.USEREVENT + 1
pygame.time.set_timer(asteroid_animation_timer,500)


while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
            #if event.type == obstacle_timer:
             #   obstacle.add(Asteroid('asteroid'))
        
        if game_active == False:
            restart_game()
        
        if game_active:
            if event.type == asteroid_animation_timer:
                if asteroid_index == 0:
                    asteroid_index == 1
                else:
                    asteroid_index = 0
                asteroid_surface = asteroid_frames[asteroid_index]



    if game_active == True:

        screen.blit(background_surface,(0,0))
        screen.blit(ground_surface,(0,480))
        
        score = display_score()
        player_control()
        animation_state()
        asteroid_movement()
        collision()
        display_score()
        #item_movement()
        difficulty()
        
    else:
        game_over_screen()
        


    pygame.display.update()
    clock.tick(60)